// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification/v1/notification.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendSmsVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSmsVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSmsVerifyCodeReqMultiError, or nil if none found.
func (m *SendSmsVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		err := SendSmsVerifyCodeReqValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SendSmsVerifyCodeReqMultiError(errors)
	}

	return nil
}

// SendSmsVerifyCodeReqMultiError is an error wrapping multiple validation
// errors returned by SendSmsVerifyCodeReq.ValidateAll() if the designated
// constraints aren't met.
type SendSmsVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsVerifyCodeReqMultiError) AllErrors() []error { return m }

// SendSmsVerifyCodeReqValidationError is the validation error returned by
// SendSmsVerifyCodeReq.Validate if the designated constraints aren't met.
type SendSmsVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsVerifyCodeReqValidationError) ErrorName() string {
	return "SendSmsVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendSmsVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsVerifyCodeReqValidationError{}

// Validate checks the field values on SendSmsVerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSmsVerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsVerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSmsVerifyCodeReplyMultiError, or nil if none found.
func (m *SendSmsVerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsVerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SmsId

	// no validation rules for Status

	// no validation rules for Code

	if len(errors) > 0 {
		return SendSmsVerifyCodeReplyMultiError(errors)
	}

	return nil
}

// SendSmsVerifyCodeReplyMultiError is an error wrapping multiple validation
// errors returned by SendSmsVerifyCodeReply.ValidateAll() if the designated
// constraints aren't met.
type SendSmsVerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsVerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsVerifyCodeReplyMultiError) AllErrors() []error { return m }

// SendSmsVerifyCodeReplyValidationError is the validation error returned by
// SendSmsVerifyCodeReply.Validate if the designated constraints aren't met.
type SendSmsVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsVerifyCodeReplyValidationError) ErrorName() string {
	return "SendSmsVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendSmsVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsVerifyCodeReplyValidationError{}

// Validate checks the field values on SendSmsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendSmsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendSmsReqMultiError, or
// nil if none found.
func (m *SendSmsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSmsReqMultiError(errors)
	}

	return nil
}

// SendSmsReqMultiError is an error wrapping multiple validation errors
// returned by SendSmsReq.ValidateAll() if the designated constraints aren't met.
type SendSmsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsReqMultiError) AllErrors() []error { return m }

// SendSmsReqValidationError is the validation error returned by
// SendSmsReq.Validate if the designated constraints aren't met.
type SendSmsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsReqValidationError) ErrorName() string { return "SendSmsReqValidationError" }

// Error satisfies the builtin error interface
func (e SendSmsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsReqValidationError{}

// Validate checks the field values on SendSmsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendSmsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendSmsReplyMultiError, or
// nil if none found.
func (m *SendSmsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSmsReplyMultiError(errors)
	}

	return nil
}

// SendSmsReplyMultiError is an error wrapping multiple validation errors
// returned by SendSmsReply.ValidateAll() if the designated constraints aren't met.
type SendSmsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsReplyMultiError) AllErrors() []error { return m }

// SendSmsReplyValidationError is the validation error returned by
// SendSmsReply.Validate if the designated constraints aren't met.
type SendSmsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsReplyValidationError) ErrorName() string { return "SendSmsReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendSmsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsReplyValidationError{}

// Validate checks the field values on SendEmailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendEmailReqMultiError, or
// nil if none found.
func (m *SendEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := SendEmailReqValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetAddress()); err != nil {
		err = SendEmailReqValidationError{
			field:  "Address",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSubject()); l < 2 || l > 64 {
		err := SendEmailReqValidationError{
			field:  "Subject",
			reason: "value length must be between 2 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := SendEmailReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendEmailReqMultiError(errors)
	}

	return nil
}

func (m *SendEmailReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SendEmailReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SendEmailReqMultiError is an error wrapping multiple validation errors
// returned by SendEmailReq.ValidateAll() if the designated constraints aren't met.
type SendEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailReqMultiError) AllErrors() []error { return m }

// SendEmailReqValidationError is the validation error returned by
// SendEmailReq.Validate if the designated constraints aren't met.
type SendEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailReqValidationError) ErrorName() string { return "SendEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e SendEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailReqValidationError{}

// Validate checks the field values on SendEmailReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendEmailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendEmailReplyMultiError,
// or nil if none found.
func (m *SendEmailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SendEmailReplyMultiError(errors)
	}

	return nil
}

// SendEmailReplyMultiError is an error wrapping multiple validation errors
// returned by SendEmailReply.ValidateAll() if the designated constraints
// aren't met.
type SendEmailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailReplyMultiError) AllErrors() []error { return m }

// SendEmailReplyValidationError is the validation error returned by
// SendEmailReply.Validate if the designated constraints aren't met.
type SendEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailReplyValidationError) ErrorName() string { return "SendEmailReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailReplyValidationError{}
