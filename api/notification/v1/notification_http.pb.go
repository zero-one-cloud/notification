// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.17.3
// source: notification/v1/notification.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotificationServiceSendEmail = "/api.notification.v1.NotificationService/SendEmail"
const OperationNotificationServiceSendSms = "/api.notification.v1.NotificationService/SendSms"
const OperationNotificationServiceSendSmsVerifyCode = "/api.notification.v1.NotificationService/SendSmsVerifyCode"

type NotificationServiceHTTPServer interface {
	// SendEmail 发送邮件
	SendEmail(context.Context, *SendEmailReq) (*SendEmailReply, error)
	// SendSms 发送通用短信
	SendSms(context.Context, *SendSmsReq) (*SendSmsReply, error)
	// SendSmsVerifyCode 发送短信验证码
	SendSmsVerifyCode(context.Context, *SendSmsVerifyCodeReq) (*SendSmsVerifyCodeReply, error)
}

func RegisterNotificationServiceHTTPServer(s *http.Server, srv NotificationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/sms/verify_code", _NotificationService_SendSmsVerifyCode0_HTTP_Handler(srv))
	r.POST("/sms/send", _NotificationService_SendSms0_HTTP_Handler(srv))
	r.POST("/email", _NotificationService_SendEmail0_HTTP_Handler(srv))
}

func _NotificationService_SendSmsVerifyCode0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendSmsVerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceSendSmsVerifyCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSmsVerifyCode(ctx, req.(*SendSmsVerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendSmsVerifyCodeReply)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_SendSms0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendSmsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceSendSms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSms(ctx, req.(*SendSmsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendSmsReply)
		return ctx.Result(200, reply)
	}
}

func _NotificationService_SendEmail0_HTTP_Handler(srv NotificationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationServiceSendEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmail(ctx, req.(*SendEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailReply)
		return ctx.Result(200, reply)
	}
}

type NotificationServiceHTTPClient interface {
	SendEmail(ctx context.Context, req *SendEmailReq, opts ...http.CallOption) (rsp *SendEmailReply, err error)
	SendSms(ctx context.Context, req *SendSmsReq, opts ...http.CallOption) (rsp *SendSmsReply, err error)
	SendSmsVerifyCode(ctx context.Context, req *SendSmsVerifyCodeReq, opts ...http.CallOption) (rsp *SendSmsVerifyCodeReply, err error)
}

type NotificationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNotificationServiceHTTPClient(client *http.Client) NotificationServiceHTTPClient {
	return &NotificationServiceHTTPClientImpl{client}
}

func (c *NotificationServiceHTTPClientImpl) SendEmail(ctx context.Context, in *SendEmailReq, opts ...http.CallOption) (*SendEmailReply, error) {
	var out SendEmailReply
	pattern := "/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationServiceSendEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationServiceHTTPClientImpl) SendSms(ctx context.Context, in *SendSmsReq, opts ...http.CallOption) (*SendSmsReply, error) {
	var out SendSmsReply
	pattern := "/sms/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationServiceSendSms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NotificationServiceHTTPClientImpl) SendSmsVerifyCode(ctx context.Context, in *SendSmsVerifyCodeReq, opts ...http.CallOption) (*SendSmsVerifyCodeReply, error) {
	var out SendSmsVerifyCodeReply
	pattern := "/sms/verify_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationServiceSendSmsVerifyCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
